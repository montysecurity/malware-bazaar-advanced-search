import argparse
import requests
from time import sleep
from json import loads

parser = argparse.ArgumentParser(description="MalwareBazaar Advanced Search")
parser.add_argument("-a", "--api-key", type=str, help="MalwareBazaar API Key")
parser.add_argument("-s", "--search", type=str, help="Search String")

args = parser.parse_args()
api_key = args.api_key
search_string = args.search

def convert_search_string(search_string):
    key_conversion = {
        "tag": "get_taginfo",
        "file_type": "get_file_type"
    }
    filters = search_string.split(" ")
    filters_coverted = []
    for filter in filters:
        split_filter = filter.split(":")
        k = split_filter[0]
        try:
            q = key_conversion[split_filter[0]]
        except KeyError:
            print(f"ERROR: {k} not a valid search operator")
            return
        v = split_filter[1]
        kv = f"query={q}&{k}={v}&limit=10"
        kv = {
            'query': q,
            k: v,
            'limit': 2
        }
        filters_coverted.append(kv)
    return filters_coverted

def search_mb(api_key, filters_coverted):
    print()
    print()
    print(F"Search Provided   =   {search_string}")
    print()
    failure_list = []
    api_url = "https://mb-api.abuse.ch/api/v1/"
    for filter in filters_coverted:
        print(filter)
        mb_request = requests.post(url=api_url, data=filter)
        mb_response = loads(mb_request.text)
        return_status = str(mb_response['query_status'])
        print(return_status)
        if return_status != "ok":
            failure_list.append(filter)
            continue
        data = mb_response["data"]
        print(f"{len(data)} results")
        sleep(5)
    #return mb_request.text

def main():

    filters_coverted = convert_search_string(search_string)
    data = search_mb(api_key, filters_coverted)

main()