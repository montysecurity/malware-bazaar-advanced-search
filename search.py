import argparse
import requests
from time import sleep
import json

parser = argparse.ArgumentParser(description="MalwareBazaar Advanced Search")
parser.add_argument("-s", "--search", type=str, help="Search String")
parser.add_argument("-a", "--print-all", action="store_true", help="print all matches")
parser.add_argument("-u", "--url", action="store_true", help="print URLS instead of hashes")
parser.add_argument("-l", "--limit", default=1000, type=int, help="Upper limit of number of hashes to pull per search (default: 1000) (max: 1000)")
parser.add_argument("--get-file", type=str, help="download this file hash")

args = parser.parse_args()
search_string = args.search
print_all = args.print_all
url = args.url
limit = args.limit
get_file = args.get_file

api_url = "https://mb-api.abuse.ch/api/v1/"

def download_hash(hash):
    request_data = {
        "query": "get_file",
        "sha256_hash": str(hash).lower()
    }
    download_request = requests.post(url=api_url, data=request_data)
    with open(str(hash) + "_pw_infected.zip", "wb") as f:
        f.write(download_request.content)

def convert_search_string(search_string):
    key_conversion = {
        "tag": "get_taginfo",
        "file_type": "get_file_type",
        "signature": "get_siginfo"
    }
    filters = search_string.split(" ")
    filters_coverted = []
    for filter in filters:
        split_filter = filter.split(":")
        k = split_filter[0]
        try:
            q = key_conversion[split_filter[0]]
        except KeyError:
            print(f"ERROR: {k} not a valid search operator")
            return
        v = split_filter[1]
        kv = {
            'query': q,
            k: v,
            'limit': limit
        }
        filters_coverted.append(kv)
    return filters_coverted

def search_mb(filters_coverted):
    success_list = []
    failure_list = []
    for filter in filters_coverted:
        print(f"SEARCH: {str(filter)}")
        mb_request = requests.post(url=api_url, data=filter)
        try:
            mb_response = json.loads(mb_request.text)
        except json.decoder.JSONDecodeError:
            print("ERROR: JSON Failed To Load")
            print(mb_request.text)
        return_status = str(mb_response['query_status'])
        if return_status != "ok":
            failure_list.append(filter)
            print("RESULTS: Failed")
            continue
        data = mb_response["data"]
        success_list.append(data)
        print(f"RESULTS: {len(data)}\n")
        sleep(1)
    return success_list

def parse_results(data):
    hashes = []
    for result_set in data:
        for result in result_set:
            file_hash = str(result["sha256_hash"])
            hashes.append(file_hash)
    matches = set()
    for file_hash in hashes:
        if hashes.count(file_hash) == len(data): # number of sighting = number of searches
            matches.add(file_hash)
    
    print()
    print(f"MATCHES: {str(len(matches))}")
    print()
    if len(matches) > 0:
        for i in matches:
            if url:
                print(f"https://bazaar.abuse.ch/sample/{i}")
            else:
                print(i)
            if not print_all:
                break

def main():
    if get_file and search_string:
        print("error: connot use both modes")
        return
    if get_file:
        print(1)
        download_hash(get_file)
    if search_string:
        filters_coverted = convert_search_string(search_string)
        data = search_mb(filters_coverted)
        parse_results(data)

main()